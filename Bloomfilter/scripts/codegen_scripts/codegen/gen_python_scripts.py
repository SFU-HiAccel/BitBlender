from codegen.types import DesignType

class PyScriptGenerator:
    def __init__(self, config):
        self.config = config


    def generate_debug_script(self):
        codeArr = []
        codeArr.append('import sys ' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('FNAME_TO_READ = "KENNY_swemu"' + "\n")
        codeArr.append('FNAME_TO_WRITE = "KENNY_makecheck_sw_REORDERED"' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('lines_input = []' + "\n")
        codeArr.append('lines_output = []' + "\n")
        codeArr.append('delimiters = [' + "\n")
        codeArr.append('    "HOST",' + "\n")
        codeArr.append('    "LOADBV",' + "\n")
        codeArr.append('    "LOADKEY",' + "\n")
        codeArr.append('    "COMPUTEHASH_FEEDER",' + "\n")
        codeArr.append('    "COMPUTEHASH_COMPUTER",' + "\n")
        codeArr.append('    "ARBITER_MONO",' + "\n")
        codeArr.append('    "ARBITER FORWARDER",' + "\n")
        codeArr.append('    "ARBITER ATOM",' + "\n")
        codeArr.append('    "ARBITER RATEMON",' + "\n")
        codeArr.append('    "QUERY UNIT",' + "\n")
        codeArr.append('    "DEBUG_QUERY_SINK",' + "\n")
        codeArr.append('    "SHUFFLE TtoS",' + "\n")
        codeArr.append('    "SHUFFLE ORDERING",' + "\n")
        codeArr.append('    "AGGREGATE",' + "\n")
        codeArr.append('    "PACKOUTPUT",' + "\n")
        codeArr.append('    "WRITEOUTPUT"' + "\n")
        codeArr.append(']' + "\n")
        codeArr.append('numbered_delimiters = [' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    "COMPUTEHASH_FEEDER",' + "\n")
        codeArr.append('    "COMPUTEHASH_COMPUTER",' + "\n")
        codeArr.append('    "ARBITER FORWARDER",' + "\n")
        codeArr.append('    "ARBITER ATOM",' + "\n")
        codeArr.append('    "ARBITER RATEMON",' + "\n")
        codeArr.append('    "QUERY UNIT",' + "\n")
        codeArr.append('    "DEBUG_QUERY_SINK",' + "\n")
        codeArr.append('    "SHUFFLE TtoS",' + "\n")
        codeArr.append('    "SHUFFLE ORDERING",' + "\n")
        codeArr.append('    "AGGREGATE",' + "\n")
        codeArr.append('    "PACKOUTPUT"' + "\n")
        codeArr.append(']' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('if __name__ == "__main__":' + "\n")
        codeArr.append('    f = open(FNAME_TO_READ, "r")' + "\n")
        codeArr.append('    lines_input = f.readlines()' + "\n")
        codeArr.append('    #print("WARNING! WARNING! WARNING")' + "\n")
        codeArr.append('    #print("THIS IS CONFIGURED FOR DUMB_MULTISTREAM.")' + "\n")
        codeArr.append('    #print("WARNING! WARNING! WARNING")' + "\n")
        codeArr.append('    for delimiter in delimiters:' + "\n")
        codeArr.append('        tmp = []' + "\n")
        codeArr.append('        lines_output.append("\\n")' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('        if delimiter in numbered_delimiters:' + "\n")
        codeArr.append('            print("Found a numbered delimiter: " + delimiter)' + "\n")
        codeArr.append('            for line in lines_input:' + "\n")
        codeArr.append('                if (delimiter in line):' + "\n")
        codeArr.append('                    tmp.append(line)' + "\n")
        codeArr.append('                    found_one = 1' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('            ### Sorting the list of strings, according to the string before a "-". ' + "\n")
        codeArr.append('            #### https://stackoverflow.com/questions/21431052/sort-list-of-strings-by-a-part-of-the-string' + "\n")
        codeArr.append('            tmp.sort(key=lambda x: x.split("-")[0])' + "\n")
        codeArr.append('            for line in tmp:' + "\n")
        codeArr.append('                lines_output.append(line)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('        else:' + "\n")
        codeArr.append('            print("Found a regular delimiter: " + delimiter)' + "\n")
        codeArr.append('            for line in lines_input:' + "\n")
        codeArr.append('                if (delimiter in line):' + "\n")
        codeArr.append('                    lines_output.append(line)' + "\n")
        codeArr.append('    ' + "\n")
        codeArr.append('    f.close()' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    f = open(FNAME_TO_WRITE, "w")' + "\n")
        codeArr.append('    f.writelines(lines_output)' + "\n")
        codeArr.append('    print("")' + "\n")
        return codeArr











    def generate_datacoll_script(self):
        codeArr = []
        codeArr.append('import sys' + "\n")
        codeArr.append('import os' + "\n")
        codeArr.append('import re' + "\n")
        codeArr.append('import json' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('FILENOTFOUND_RETVAL = " (The file did not exist)"' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('#######################################' + "\n")
        codeArr.append('## GETTING IIs:' + "\n")
        codeArr.append('#######################################' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def Log_IIs(_out_file_name):' + "\n")
        codeArr.append('    list_of_IIs = []' + "\n")
        codeArr.append('    out_file_contents = []' + "\n")
        codeArr.append('    list_of_IIs.append("\\n\\n\\n\\n")' + "\n")
        codeArr.append('    list_of_IIs.append("List of IIs:" + "\\n")' + "\n")
        codeArr.append('    list_of_IIs.append("------------------------------------------------------------" + "\\n")' + "\n")
        codeArr.append('    out_file_contents.append("\\n\\n\\n\\n")' + "\n")
        codeArr.append('    out_file_contents.append("II REPORTS" + "\\n")' + "\n")
        codeArr.append('    out_file_contents.append("------------------------------------------------------------" + "\\n")' + "\n")
        if (self.config.design_type == DesignType.NAIVE_MULTISTREAM):
            codeArr.append('    hls_rpts_dir = "_x.hw_naive_multistream_MurmurHash3.{}/report/"'.format(self.config.device_name) + "\n")
        if (self.config.design_type == DesignType.NORMAL_MULTISTREAM):
            codeArr.append('    hls_rpts_dir = "_x.hw_multistream_MurmurHash3.{}/report/"'.format(self.config.device_name) + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    ACHIEVED_II_OFFSET=5' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    try:' + "\n")
        codeArr.append('        hls_rpts_fnames = os.listdir(hls_rpts_dir)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('        for fname in hls_rpts_fnames:' + "\n")
        codeArr.append('            # Skip over vim swap files, in case Im reading those.' + "\n")
        codeArr.append('            if (".swp" in fname):' + "\n")
        codeArr.append('                continue' + "\n")
        codeArr.append('            if not ("_csynth.rpt" in fname):' + "\n")
        codeArr.append('                continue' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('            full_fname = hls_rpts_dir + fname' + "\n")
        codeArr.append('            f = open(full_fname, "r")' + "\n")
        codeArr.append('            hls_report_lines = f.readlines()' + "\n")
        codeArr.append('            IS_II_TBL = 0' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('            for line in hls_report_lines:' + "\n")
        codeArr.append('                if (IS_II_TBL):' + "\n")
        codeArr.append('                    out_file_contents.append(line)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('                    ### This is the "interesting" line of the II table.' + "\n")
        codeArr.append('                    if ("Loop Name" in line):' + "\n")
        codeArr.append('                        entry = line.split("|")[ACHIEVED_II_OFFSET]' + "\n")
        codeArr.append('                        if (entry.strip() != "achieved"):' + "\n")
        codeArr.append('                            list_of_IIs.append("    ERROR: THIS TABLE ISNT REPORTING THE CORRECT THING" + "\\n")' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('                    if ("|-" in line):' + "\n")
        codeArr.append('                        entry = line.split("|")[ACHIEVED_II_OFFSET]' + "\n")
        codeArr.append('                        entry = entry.strip()' + "\n")
        codeArr.append('                        if (int(entry) > 1):' + "\n")
        codeArr.append('                            tail = "!!! ERROR ERROR ERROR"' + "\n")
        codeArr.append('                        else:' + "\n")
        codeArr.append('                            tail = ""' + "\n")
        codeArr.append('                        list_of_IIs.append("    {name:>90} : II={ii:<5} {tail}".format(' + "\n")
        codeArr.append('                                            name=module_name.strip()' + "\n")
        codeArr.append('                                            ,ii=entry' + "\n")
        codeArr.append('                                            ,tail=tail' + "\n")
        codeArr.append('                                            ) + "\\n"' + "\n")
        codeArr.append('                        )' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('                    ### After the table there is an empty line. Stop processing when we hit that.' + "\n")
        codeArr.append('                    if (line.strip() == ""):' + "\n")
        codeArr.append('                        break' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('                if "Vitis HLS Report" in line:' + "\n")
        codeArr.append('                    # Get the name of the module.' + "\n")
        codeArr.append('                    module_name = line[24:]' + "\n")
        codeArr.append('                    out_file_contents.append("-------" + "\\n")' + "\n")
        codeArr.append('                    out_file_contents.append(module_name)' + "\n")
        codeArr.append('                elif "Loop:" in line:' + "\n")
        codeArr.append('                    # The start of the II table.' + "\n")
        codeArr.append('                    IS_II_TBL=1' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    except FileNotFoundError:' + "\n")
        codeArr.append('        list_of_IIs.append(FILENOTFOUND_RETVAL)' + "\n")
        codeArr.append('        out_file_contents.append(FILENOTFOUND_RETVAL)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    finally:' + "\n")
        codeArr.append('        f = open(_out_file_name, "a")' + "\n")
        codeArr.append('        f.writelines(list_of_IIs)' + "\n")
        codeArr.append('        f.writelines(out_file_contents)' + "\n")



        codeArr.append('' + "\n")
        codeArr.append('#######################################' + "\n")
        codeArr.append('## HLS Frequencies:' + "\n")
        codeArr.append('#######################################' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def Log_HLS_freq_estimates(_out_file_name):' + "\n")
        codeArr.append('    out_file_contents = []' + "\n")
        codeArr.append('    out_file_contents.append("\\n\\n\\n\\n")' + "\n")
        codeArr.append('    out_file_contents.append("HLS Frequency Estimates:"+ "\\n")' + "\n")
        codeArr.append('    out_file_contents.append("------------------------------------------------------------" + "\\n")' + "\n")
        if (self.config.design_type == DesignType.NAIVE_MULTISTREAM):
            codeArr.append('    hls_logs_dir = "_x.hw_naive_multistream_MurmurHash3.{}/log/"'.format(self.config.device_name) + "\n")
        if (self.config.design_type == DesignType.NORMAL_MULTISTREAM):
            codeArr.append('    hls_logs_dir = "_x.hw_multistream_MurmurHash3.{}/log/"'.format(self.config.device_name) + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    class ModuleFreq:' + "\n")
        codeArr.append('        def __init__(self):' + "\n")
        codeArr.append('            self.module = "module_name"' + "\n")
        codeArr.append('            self.freq = "0.0"' + "\n")
        codeArr.append('        def __init__(self, m, f):' + "\n")
        codeArr.append('            self.module = m ' + "\n")
        codeArr.append('            self.freq = f' + "\n")
        codeArr.append('        def to_str(self):' + "\n")
        codeArr.append('            return "{:>50} : {:<10}".format(self.module, self.freq)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    module_names = []' + "\n")
        codeArr.append('    freqs = []' + "\n")
        codeArr.append('    num_modules = 0' + "\n")
        codeArr.append('    fmax_regex = "\d+\.\d\d"' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    try:' + "\n")
        codeArr.append('        hls_logs_fnames = os.listdir(hls_logs_dir)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('        for fname in hls_logs_fnames:' + "\n")
        codeArr.append('            # Skip over vim swap files, in case Im reading those.' + "\n")
        codeArr.append('            if not (fname.endswith(".log")):' + "\n")
        codeArr.append('                continue' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('            full_fname = hls_logs_dir + fname' + "\n")
        codeArr.append('            f = open(full_fname, "r")' + "\n")
        codeArr.append('            log_lines = f.readlines()' + "\n")
        codeArr.append('            num_modules += 1' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('            for line in log_lines:' + "\n")
        codeArr.append('                # Get the name of the module' + "\n")
        codeArr.append('                if ("Generating Verilog RTL for" in line):' + "\n")
        codeArr.append('                    a = line.split("Generating Verilog RTL for")' + "\n")
        codeArr.append('                    module_name = a[1].strip().rstrip(".")' + "\n")
        codeArr.append('                    module_names.append(module_name)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('                # Get the Estimated FMAX' + "\n")
        codeArr.append('                if ("Estimated Fmax" in line):' + "\n")
        codeArr.append('                    a = line.split("****")' + "\n")
        codeArr.append('                    a = a[1].strip()' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('                    match = re.search(fmax_regex, a)' + "\n")
        codeArr.append('                    if (match):' + "\n")
        codeArr.append('                        cur_freq = float(match[0])' + "\n")
        codeArr.append('                        freqs.append(cur_freq)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    except FileNotFoundError:' + "\n")
        codeArr.append('        out_file_contents.append(FILENOTFOUND_RETVAL)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    else:' + "\n")
        codeArr.append('        modules_and_freqs = []' + "\n")
        codeArr.append('        for i in range(0, num_modules):' + "\n")
        codeArr.append('            modules_and_freqs.append(ModuleFreq(module_names[i], freqs[i]))' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('        modules_and_freqs.sort(key=lambda x: x.freq)' + "\n")
        codeArr.append('        for i in range(0, num_modules):' + "\n")
        codeArr.append('            out_file_contents.append(modules_and_freqs[i].to_str() + "\\n")' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    finally:' + "\n")
        codeArr.append('        f = open(_out_file_name, "a")' + "\n")
        codeArr.append('        f.writelines(out_file_contents)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")

        codeArr.append('#######################################' + "\n")
        codeArr.append('## TAPA/Autobridge number of slots:' + "\n")
        codeArr.append('#######################################' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def Log_TAPA_Num_Slots(_out_file_name):' + "\n")
        codeArr.append('    out_file_contents = []' + "\n")
        codeArr.append('    out_file_contents.append("\\n\\n\\n\\n")' + "\n")
        if (self.config.design_type == DesignType.NAIVE_MULTISTREAM):
            codeArr.append('    autobridge_dir = "_x.hw_naive_multistream_MurmurHash3.{}/autobridge/"'.format(self.config.device_name) + "\n")
        if (self.config.design_type == DesignType.NORMAL_MULTISTREAM):
            codeArr.append('    autobridge_dir = "_x.hw_multistream_MurmurHash3.{}/autobridge/"'.format(self.config.device_name) + "\n")
        codeArr.append('    floorplan_fname = "floorplan-region-to-instances.json"' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    try:' + "\n")
        codeArr.append('        floorplan_file = open(autobridge_dir + floorplan_fname, "r")' + "\n")
        codeArr.append('    except FileNotFoundError:' + "\n")
        codeArr.append('        out_file_contents.append("Number of slots used by Autobridge: {}".format(FILENOTFOUND_RETVAL))' + "\n")
        codeArr.append('    else:' + "\n")
        codeArr.append('        floorplan_json = json.load(floorplan_file)' + "\n")
        codeArr.append('        out_file_contents.append("Number of slots used by Autobridge: {}".format(len(floorplan_json)))' + "\n")
        codeArr.append('    finally:' + "\n")
        codeArr.append('        f = open(_out_file_name, "a")' + "\n")
        codeArr.append('        f.writelines(out_file_contents)' + "\n")

        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('#######################################' + "\n")
        codeArr.append('## HW BUILD DATA:' + "\n")
        codeArr.append('#######################################' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def _Get_HW_Resource_Total_CLB_LUT(util_report_lines):' + "\n")
        codeArr.append('    for line in util_report_lines:' + "\n")
        codeArr.append('        if ("CLB LUTs" in line):' + "\n")
        codeArr.append('            percentage_used = line.split("|")[6]' + "\n")
        codeArr.append('            percentage_used = percentage_used.strip()' + "\n")
        codeArr.append('            break' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    return float(percentage_used)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def _Get_HW_Resource_Total_CLB_REG(util_report_lines):' + "\n")
        codeArr.append('    for line in util_report_lines:' + "\n")
        codeArr.append('        if ("CLB Registers" in line):' + "\n")
        codeArr.append('            percentage_used = line.split("|")[6]' + "\n")
        codeArr.append('            percentage_used = percentage_used.strip()' + "\n")
        codeArr.append('            break' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    return float(percentage_used)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def _Get_HW_Resource_Total_BRAM(util_report_lines):' + "\n")
        codeArr.append('    section = 0' + "\n")
        codeArr.append('    for line in util_report_lines:' + "\n")
        codeArr.append('        if ("3. BLOCKRAM" in line):' + "\n")
        codeArr.append('            section += 1' + "\n")
        codeArr.append('        elif ("Block RAM Tile" in line) and (section == 2):' + "\n")
        codeArr.append('            percentage_used = line.split("|")[6]' + "\n")
        codeArr.append('            percentage_used = percentage_used.strip()' + "\n")
        codeArr.append('            break' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    return float(percentage_used)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def _Get_HW_Resource_Total_URAM(util_report_lines):' + "\n")
        codeArr.append('    section = 0' + "\n")
        codeArr.append('    for line in util_report_lines:' + "\n")
        codeArr.append('        if ("3. BLOCKRAM" in line):' + "\n")
        codeArr.append('            section += 1' + "\n")
        codeArr.append('        elif ("URAM" in line) and (section == 2):' + "\n")
        codeArr.append('            percentage_used = line.split("|")[6]' + "\n")
        codeArr.append('            percentage_used = percentage_used.strip()' + "\n")
        codeArr.append('            break' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    return float(percentage_used)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def _Get_HW_Resource_Total_DSP(util_report_lines):' + "\n")
        codeArr.append('    section = 0' + "\n")
        codeArr.append('    for line in util_report_lines:' + "\n")
        codeArr.append('        if ("4. ARITHMETIC" in line):' + "\n")
        codeArr.append('            section += 1' + "\n")
        codeArr.append('        elif ("DSPs" in line) and (section == 2):' + "\n")
        codeArr.append('            percentage_used = line.split("|")[6]' + "\n")
        codeArr.append('            percentage_used = percentage_used.strip()' + "\n")
        codeArr.append('            break' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    return float(percentage_used)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def _Get_HW_Resource_CLB_per_SLR(util_report_lines):' + "\n")
        codeArr.append('    clb_per_slr = [0, 0, 0]' + "\n")
        codeArr.append('    section = 0' + "\n")
        codeArr.append('    for line in util_report_lines:' + "\n")
        codeArr.append('        if ("14. SLR CLB Logic and Dedicated Block Utilization" in line):' + "\n")
        codeArr.append('            section += 1' + "\n")
        codeArr.append('        elif ("CLB    " in line) and (section == 2):' + "\n")
        codeArr.append('            for i in range(0, 3):' + "\n")
        codeArr.append('                clb_per_slr[i] = line.split("|")[5+i]' + "\n")
        codeArr.append('                clb_per_slr[i] = clb_per_slr[i].strip()' + "\n")
        codeArr.append('                clb_per_slr[i] = float(clb_per_slr[i])' + "\n")
        codeArr.append('            break' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    return clb_per_slr' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def Log_HW_Resource_Usages(_out_file_name):' + "\n")
        codeArr.append('    out_file_contents = []' + "\n")
        codeArr.append('    out_file_contents.append("\\n\\n\\n\\n")' + "\n")
        codeArr.append('    out_file_contents.append("  UTILIZATION REPORTS" + "\\n")' + "\n")
        codeArr.append('    out_file_contents.append("------------------------------------------------------------" + "\\n")' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    report_dir_relpath = "vitis_run_hw/workload_{}.temp/reports/link/imp/"'.format(self.config.device_name) + "\n")
        codeArr.append('    util_report_fname = "impl_1_full_util_routed.rpt"' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    try:' + "\n")
        codeArr.append('        util_report_file = open(report_dir_relpath + util_report_fname, "r")' + "\n")
        codeArr.append('        util_report_lines = util_report_file.readlines()' + "\n")
        codeArr.append('        total_LUT_usage     = _Get_HW_Resource_Total_CLB_LUT    (util_report_lines)' + "\n")
        codeArr.append('        total_FF_usage      = _Get_HW_Resource_Total_CLB_REG     (util_report_lines)' + "\n")
        codeArr.append('        total_BRAM_usage    = _Get_HW_Resource_Total_BRAM       (util_report_lines)' + "\n")
        codeArr.append('        total_URAM_usage    = _Get_HW_Resource_Total_URAM       (util_report_lines)' + "\n")
        codeArr.append('        total_DSP_usage     = _Get_HW_Resource_Total_DSP        (util_report_lines)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('        out_file_contents.append("Total LUT Usage:  {}".format(total_LUT_usage) + "\\n")' + "\n")
        codeArr.append('        out_file_contents.append("Total FF  Usage:  {}".format(total_FF_usage) + "\\n")' + "\n")
        codeArr.append('        out_file_contents.append("Total BRAM Usage: {}".format(total_BRAM_usage) + "\\n")' + "\n")
        codeArr.append('        out_file_contents.append("Total URAM Usage: {}".format(total_URAM_usage) + "\\n")' + "\n")
        codeArr.append('        out_file_contents.append("Total DSP Usage:  {}".format(total_DSP_usage) + "\\n")' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    except FileNotFoundError:' + "\n")
        codeArr.append('        out_file_contents.append(FILENOTFOUND_RETVAL)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    finally:' + "\n")
        codeArr.append('        with open(_out_file_name, "a") as f:' + "\n")
        codeArr.append('            f.writelines(out_file_contents)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def Get_HW_frequencies():' + "\n")
        codeArr.append('    report_dir_relpath = "vitis_run_hw/"' + "\n")
        codeArr.append('    freq_report_fname = "workload_{}.xclbin.info"'.format(self.config.device_name) + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    try:' + "\n")
        codeArr.append('        freq_report_file = open(report_dir_relpath + freq_report_fname, "r")' + "\n")
        codeArr.append('        freq_report_lines = freq_report_file.readlines()' + "\n")
        codeArr.append('    except FileNotFoundError:' + "\n")
        codeArr.append('        return (FILENOTFOUND_RETVAL, FILENOTFOUND_RETVAL)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    section = 0' + "\n")
        codeArr.append('    for line in freq_report_lines:' + "\n")
        codeArr.append('        if ("DATA_CLK" in line):' + "\n")
        codeArr.append('            section = 1' + "\n")
        codeArr.append('        elif ("hbm_aclk" in line):' + "\n")
        codeArr.append('            section = 2' + "\n")
        codeArr.append('        elif ("KERNEL_CLK" in line):' + "\n")
        codeArr.append('            section = 5' + "\n")
        codeArr.append('        elif ("Frequency" in line) and (section == 1):' + "\n")
        codeArr.append('            kern_freq = line.split(":")[1]' + "\n")
        codeArr.append('            kern_freq = kern_freq.split("MHz")[0].strip()' + "\n")
        codeArr.append('        elif ("Frequency" in line) and (section == 2):' + "\n")
        codeArr.append('            mem_freq = line.split(":")[1]' + "\n")
        codeArr.append('            mem_freq = mem_freq.split("MHz")[0].strip()' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    return (mem_freq, kern_freq)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('def Log_HW_frequencies(_out_file_name):' + "\n")
        codeArr.append('    out_file_contents = []' + "\n")
        codeArr.append('    out_file_contents.append("  FINAL HW FREQUENCIES" + "\\n")' + "\n")
        codeArr.append('    out_file_contents.append("------------------------------------------------------------" + "\\n")' + "\n")
        codeArr.append('    (mem_freq, kern_freq) = Get_HW_frequencies()' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    out_file_contents.append(" HBM  Freq: {}".format(mem_freq) + "\\n")' + "\n")
        codeArr.append('    out_file_contents.append(" Kern Freq: {}".format(kern_freq) + "\\n")' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    f = open(_out_file_name, "a")' + "\n")
        codeArr.append('    f.writelines(out_file_contents)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('if __name__ == "__main__":' + "\n")
        codeArr.append('    if ((len(sys.argv) > 1)):' + "\n")
        codeArr.append('        print("")' + "\n")
        codeArr.append('        print("ERROR: Incorrect arguments.")' + "\n")
        codeArr.append('        print("     This program does not take any CLI arguments.")' + "\n")
        codeArr.append('        print("")' + "\n")
        codeArr.append('        sys.exit(-1)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    output_filename = "RESOURCES_AND_IIs.log"' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    if (os.path.exists(output_filename)):' + "\n")
        codeArr.append('        os.remove(output_filename)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    Log_HW_frequencies(output_filename)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    Log_HW_Resource_Usages(output_filename)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    Log_TAPA_Num_Slots(output_filename)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    Log_HLS_freq_estimates(output_filename)' + "\n")
        codeArr.append('' + "\n")
        codeArr.append('    Log_IIs(output_filename)' + "\n")

        return codeArr

